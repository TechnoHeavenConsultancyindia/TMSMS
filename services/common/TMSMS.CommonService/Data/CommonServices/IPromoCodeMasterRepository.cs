using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Volo.Abp.Domain.Repositories;

namespace TMSMS.CommonService.CommonServices
{
    public partial interface IPromoCodeMasterRepository : IRepository<PromoCodeMaster, int>
    {

        Task DeleteAllAsync(
            string? filterText = null,
            string? name = null,
            string? promoCode = null,
            string? serviceType = null,
            string? discountType = null,
            decimal? discountValueMin = null,
            decimal? discountValueMax = null,
            DateTime? dateEffectiveFromMin = null,
            DateTime? dateEffectiveFromMax = null,
            DateTime? dateEffectiveToMin = null,
            DateTime? dateEffectiveToMax = null,
            int? maxUsageLimitMin = null,
            int? maxUsageLimitMax = null,
            int? maxUsagePerUserMin = null,
            int? maxUsagePerUserMax = null,
            string? customerType = null,
            decimal? minBookingAmountMin = null,
            decimal? minBookingAmountMax = null,
            string? paymentMethod = null,
            string? userGroup = null,
            int? minNoOfNightsMin = null,
            int? minNoOfNightsMax = null,
            int? minNoOfPaxMin = null,
            int? minNoOfPaxMax = null,
            int? earlyBirdDaysMin = null,
            int? earlyBirdDaysMax = null,
            DateTime? validTimeFromMin = null,
            DateTime? validTimeFromMax = null,
            DateTime? validTimeToMin = null,
            DateTime? validTimeToMax = null,
            bool? stackable = null,
            int? countryId = null,
            int? cityId = null,
            CancellationToken cancellationToken = default);
        Task<PromoCodeMasterWithNavigationProperties> GetWithNavigationPropertiesAsync(
            int id,
            CancellationToken cancellationToken = default
        );

        Task<List<PromoCodeMasterWithNavigationProperties>> GetListWithNavigationPropertiesAsync(
            string? filterText = null,
            string? name = null,
            string? promoCode = null,
            string? serviceType = null,
            string? discountType = null,
            decimal? discountValueMin = null,
            decimal? discountValueMax = null,
            DateTime? dateEffectiveFromMin = null,
            DateTime? dateEffectiveFromMax = null,
            DateTime? dateEffectiveToMin = null,
            DateTime? dateEffectiveToMax = null,
            int? maxUsageLimitMin = null,
            int? maxUsageLimitMax = null,
            int? maxUsagePerUserMin = null,
            int? maxUsagePerUserMax = null,
            string? customerType = null,
            decimal? minBookingAmountMin = null,
            decimal? minBookingAmountMax = null,
            string? paymentMethod = null,
            string? userGroup = null,
            int? minNoOfNightsMin = null,
            int? minNoOfNightsMax = null,
            int? minNoOfPaxMin = null,
            int? minNoOfPaxMax = null,
            int? earlyBirdDaysMin = null,
            int? earlyBirdDaysMax = null,
            DateTime? validTimeFromMin = null,
            DateTime? validTimeFromMax = null,
            DateTime? validTimeToMin = null,
            DateTime? validTimeToMax = null,
            bool? stackable = null,
            int? countryId = null,
            int? cityId = null,
            string? sorting = null,
            int maxResultCount = int.MaxValue,
            int skipCount = 0,
            CancellationToken cancellationToken = default
        );

        Task<List<PromoCodeMaster>> GetListAsync(
                    string? filterText = null,
                    string? name = null,
                    string? promoCode = null,
                    string? serviceType = null,
                    string? discountType = null,
                    decimal? discountValueMin = null,
                    decimal? discountValueMax = null,
                    DateTime? dateEffectiveFromMin = null,
                    DateTime? dateEffectiveFromMax = null,
                    DateTime? dateEffectiveToMin = null,
                    DateTime? dateEffectiveToMax = null,
                    int? maxUsageLimitMin = null,
                    int? maxUsageLimitMax = null,
                    int? maxUsagePerUserMin = null,
                    int? maxUsagePerUserMax = null,
                    string? customerType = null,
                    decimal? minBookingAmountMin = null,
                    decimal? minBookingAmountMax = null,
                    string? paymentMethod = null,
                    string? userGroup = null,
                    int? minNoOfNightsMin = null,
                    int? minNoOfNightsMax = null,
                    int? minNoOfPaxMin = null,
                    int? minNoOfPaxMax = null,
                    int? earlyBirdDaysMin = null,
                    int? earlyBirdDaysMax = null,
                    DateTime? validTimeFromMin = null,
                    DateTime? validTimeFromMax = null,
                    DateTime? validTimeToMin = null,
                    DateTime? validTimeToMax = null,
                    bool? stackable = null,
                    string? sorting = null,
                    int maxResultCount = int.MaxValue,
                    int skipCount = 0,
                    CancellationToken cancellationToken = default
                );

        Task<long> GetCountAsync(
            string? filterText = null,
            string? name = null,
            string? promoCode = null,
            string? serviceType = null,
            string? discountType = null,
            decimal? discountValueMin = null,
            decimal? discountValueMax = null,
            DateTime? dateEffectiveFromMin = null,
            DateTime? dateEffectiveFromMax = null,
            DateTime? dateEffectiveToMin = null,
            DateTime? dateEffectiveToMax = null,
            int? maxUsageLimitMin = null,
            int? maxUsageLimitMax = null,
            int? maxUsagePerUserMin = null,
            int? maxUsagePerUserMax = null,
            string? customerType = null,
            decimal? minBookingAmountMin = null,
            decimal? minBookingAmountMax = null,
            string? paymentMethod = null,
            string? userGroup = null,
            int? minNoOfNightsMin = null,
            int? minNoOfNightsMax = null,
            int? minNoOfPaxMin = null,
            int? minNoOfPaxMax = null,
            int? earlyBirdDaysMin = null,
            int? earlyBirdDaysMax = null,
            DateTime? validTimeFromMin = null,
            DateTime? validTimeFromMax = null,
            DateTime? validTimeToMin = null,
            DateTime? validTimeToMax = null,
            bool? stackable = null,
            int? countryId = null,
            int? cityId = null,
            CancellationToken cancellationToken = default);
    }
}